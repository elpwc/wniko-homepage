# file importing code builder
# 请在每次添加或删除新资源文件後运行此脚本
import os

pyRootRoute = './src/resource/'
rootRoute = '../resource/'
saveRootRoute = './src/resourcesReader/'


def tip(fo):
    fo.write("// This file was automatically generated by _codebuilder.py.\n// これは _codebuilder.py で自動的に生成されたファイルです。\n// 这个文件是由 _codebuilder.py 自动生成的。\n\n")

def readBgi():
    dictName = 'bgi/'
    root = rootRoute + dictName 
    iconNames = [f.split('.')[0] for f in os.listdir(
        pyRootRoute + dictName) if f.endswith('.jpg')]

    fo = open(saveRootRoute + "bgiReader.ts", "w", encoding="utf-8")
    fo.seek(0)
    tip(fo)

    # import list
    for name in iconNames:
        fo.write("import bgi_" + name + " from '" +
                 root + name + ".jpg';\n")

    fo.write('\n')

    # object
    fo.write('export const BackgroundImages = [\n')
    for name in iconNames:
        fo.write("  bgi_" + name +",\n")

    fo.write("];\n")

    fo.write('\n')

'''
    # init
    fo.write(
        'export const initbgi = (onProgress: (amount: number, loaded: number, name: string) => void, onload: () => void) => {\n')
    fo.write("  const amount = " + str(len(iconNames)) + ";\n")
    fo.write("  let loaded = 0;\n")
    for name in iconNames:
        fo.write("  if(BackgroundImages.bgi_" + name + ".src === ''){ BackgroundImages.bgi_" + name + ".src = bgi_" + name + "; BackgroundImages." + name +
                 ".onload = () => { loaded++; if (loaded >= amount) onload(); else onProgress(amount, loaded, '" + name + "'); }} else { loaded++; if (loaded >= amount) onload(); else onProgress(amount, loaded, '" + name + "'); }\n")
    fo.write("};\n")
    fo.close()

'''


def readProjectIcon():
    dictName = 'project_icon/'
    root = rootRoute + dictName 
    iconNames = [f.split('.')[0] for f in os.listdir(
        pyRootRoute + dictName) if f.endswith('.png')]

    fo = open(saveRootRoute + "projectIconReader.ts", "w", encoding="utf-8")
    fo.seek(0)
    tip(fo)

    # import list
    for name in iconNames:
        fo.write("import project_icon_" + name + " from '" +
                 root + name + ".png';\n")

    fo.write('\n')

    # object
    fo.write('export const ProjectIcons = {\n')
    for name in iconNames:
        fo.write("  i_" + name +" : " +  "project_icon_" + name+ ",\n")

    fo.write("};\n")

    fo.write('\n')


def main():
    readBgi()
    readProjectIcon()

if __name__ == '__main__':
    main()
